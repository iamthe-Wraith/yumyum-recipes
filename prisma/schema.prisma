generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  password      String
  sessions      sessions[]
  recipes       recipes[]
  mealPlans     meal_plans[]
  meals         meals[]
  groceryLists  grocery_list[]
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model user_settings {
  id                  Int             @id @default(autoincrement())
  userId              Int             @map("user_id") @unique
  defaultServingSize  Int             @map("default_serving_size")
  createdAt           DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt           DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model sessions {
  id           Int             @id @default(autoincrement())
  token        String          @unique
  userId       Int             @map("user_id")
  user         users           @relation(fields: [userId], references: [id])
  createdAt    DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt    DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model recipes {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  image          String?
  ownerId        Int              @map("owner_id")
  owner          users            @relation(fields: [ownerId], references: [id])
  prepTime       String           @map("prep_time")
  cookTime       String           @map("cook_time")
  servings       Int
  steps          String[]
  ingredients    ingredients[]
  meals          meals[]
  description    String           @default("") @db.VarChar(300)
  isPublic       Boolean          @default(false) @map("is_public")
  notes          String           @default("")
  origRecipeId   Int?             @map("orig_recipe_id")
  origRecipe     recipes?         @relation("OriginalRecipe", fields: [origRecipeId], references: [id])
  recipe         recipes[]        @relation("OriginalRecipe")   
  createdAt      DateTime         @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt      DateTime         @default(now()) @db.Timestamp(6) @map("updated_at")
}

model ingredients {
  id            Int             @id @default(autoincrement())
  recipeId      Int             @map("recipe_id")
  recipe        recipes         @relation(fields: [recipeId], references: [id])
  name          String
  amount        Float
  unit          IngredientUnitOfMeasure?
  kelevens      Float
  type          IngredientType
}

model meal_plans {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(50)
  ownerId       Int             @map("owner_id")
  owner         users           @relation(fields: [ownerId], references: [id])
  meals         meals[]
  groceryList   grocery_list[]
  status        MealPlanStatus
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model meals {
  id            Int             @id @default(autoincrement())
  ownerId       Int             @map("owner_id")
  owner         users           @relation(fields: [ownerId], references: [id])
  recipeId      Int             @map("recipe_id")
  recipe        recipes         @relation(fields: [recipeId], references: [id])
  mealPlanId    Int             @map("meal_plan_id")
  mealPlan      meal_plans      @relation(fields: [mealPlanId], references: [id])
  serving       Int
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model grocery_list_item {
  id            Int             @id @default(autoincrement())
  groceryListId Int             @map("grocery_list_id")
  groceryList   grocery_list    @relation(fields: [groceryListId], references: [id])
  name          String
  kelevens      Float
  type          IngredientType
  status        GroceryListItemStatus
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("created_at")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("updated_at")
}

model grocery_list {
  id            Int             @id @default(autoincrement())
  ownerId       Int             @map("owner_id")
  owner         users           @relation(fields: [ownerId], references: [id])
  mealPlanId    Int             @map("meal_plan_id")
  mealPlan      meal_plans      @relation(fields: [mealPlanId], references: [id])
  status        GroceryListStatus
  items         grocery_list_item[]
}

enum IngredientUnitOfMeasure {
  PINCH
  TEASPOON
  TABLESPOON
  CUP
  PINT
  QUART
  GALLON
  POUND
  MILLILITER
  LITER
  GRAM
  OUNCE
  FLUID_OUNCE
  KILOGRAM
}

enum IngredientType {
  VOLUME
  WEIGHT
  COUNT
}

enum MealPlanStatus {
  ACTIVE
  INACTIVE
}

enum GroceryListStatus {
  ACTIVE
  INACTIVE
}

enum GroceryListItemStatus {
  ACTIVE
  INACTIVE
}